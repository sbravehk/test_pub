name: Build and Deploy macos python wheels to PyPI

on:
  workflow_dispatch:
    inputs:
      debug_enabled:
        type: boolean
        description: 'Run the build with tmate debugging enabled (https://github.com/marketplace/actions/debugging-with-tmate)'
        required: false
        default: false
  push:
    branches:
      - master
      - main

jobs:
  build_macos_wheels:
    name: Build macos wheels with ${{ matrix.py_ver_prefix }}-${{ matrix.macos_arch }}
    runs-on: macos-12
    strategy:
      matrix:
        py_ver_prefix: [cp36, cp37, cp38, cp39, cp310]
        macos_arch: [x86_64, arm64, universal2]
        exclude:
          - py_ver_prefix: cp36
            macos_arch: arm64
          - py_ver_prefix: cp36
            macos_arch: universal2
          - py_ver_prefix: cp37
            macos_arch: arm64
          - py_ver_prefix: cp37
            macos_arch: universal2
          - py_ver_prefix: cp38 # the universal python package is experimental on Intel host, so we disable cross-compiling for python3.8.
            macos_arch: arm64
          - py_ver_prefix: cp38
            macos_arch: universal2
      fail-fast: false
    timeout-minutes: 1440

    steps:
    - name: Check out source code
      uses: actions/checkout@v3

    - name: Setup tmate session
      uses: mxschmitt/action-tmate@v3
      if: ${{ github.event_name == 'workflow_dispatch' && inputs.debug_enabled }}

    - name: Build wheels
      uses: pypa/cibuildwheel@v2.13.1
      env:
        #TODO get real cpu counts
        # HAVE_STD_REGEX and RUN_HAVE_STD_REGES is needed by google benchmark when compiling ARM64 on x86_64 for macos.
        CIBW_ENVIRONMENT: CMAKE_BUILD_PARALLEL_LEVEL=10 GITHUB_SHA=${{ github.sha }} PKG_CONFIG_PATH="/usr/local/opt/ffmpeg@4/lib/pkgconfig" CMAKE_ARGS="-DHAVE_STD_REGEX=ON -DRUN_HAVE_STD_REGEX=1"
        CIBW_BUILD: ${{ matrix.py_ver_prefix }}-*
        CIBW_BUILD_VERBOSITY: 1
        CIBW_ARCHS_MACOS: ${{ matrix.macos_arch }}
        CIBW_BEFORE_ALL_MACOS: >
          echo "CIBW_BEFORE_ALL_MACOS..." &&
          if [ ! -d "3rd_party/json" ]; then (cd 3rd_party && tar xzvf 3rd_party.tar.gz && rm -rf ffmpeg_bin) fi &&
          if [ ! -d "bmf/hml/third_party/pybind11" ]; then (cd bmf/hml/third_party && tar xzvf third_party.tar.gz) fi &&
          (./scripts/build_ffmpeg.sh cpu) &&
          sed -i '' '/sigma_gn /s/^/\/\//g' bmf/hml/third_party/benchmark/src/complexity.cc
        CIBW_BEFORE_BUILD: which python && which python3 && python --version && python3 --version && file $(which python) && file $(which python3)
        CIBW_REPAIR_WHEEL_COMMAND_MACOS: ""

    - uses: actions/upload-artifact@v3
      with:
        path: ./wheelhouse/*.whl

  upload_all_to_pypi:
    needs: [build_macos_wheels]
    runs-on: ubuntu-latest # pypa/gh-action-pypi-publish only support linux
    #if: github.event_name == 'release' && github.event.action == 'published'
    steps:
    - uses: actions/download-artifact@v3
      with:
        name: artifact
        path: dist

    - name: Publish package distributions to TestPyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      #if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
      with:
        print-hash: true
        verbose: true
        skip-existing: true
        repository-url: https://test.pypi.org/legacy/
        user: __token__
        password: ${{ secrets.TEST_PYPI_TOKEN }}
        #packages-dir: wheelhouse/
